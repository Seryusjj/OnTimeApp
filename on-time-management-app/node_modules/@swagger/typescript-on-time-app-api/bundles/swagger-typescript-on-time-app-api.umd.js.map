{"version":3,"file":"swagger-typescript-on-time-app-api.umd.js","sources":["../../node_modules/tslib/tslib.es6.js","ng://@swagger/typescript-on-time-app-api/variables.ts","ng://@swagger/typescript-on-time-app-api/configuration.ts","ng://@swagger/typescript-on-time-app-api/api/checkInRecords.service.ts","ng://@swagger/typescript-on-time-app-api/api/holidays.service.ts","ng://@swagger/typescript-on-time-app-api/api/identity.service.ts","ng://@swagger/typescript-on-time-app-api/api/roles.service.ts","ng://@swagger/typescript-on-time-app-api/api/users.service.ts","ng://@swagger/typescript-on-time-app-api/api/api.ts","ng://@swagger/typescript-on-time-app-api/api.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const BASE_PATH = new InjectionToken<string>('basePath');\r\nexport const COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n}\r\n","export interface ConfigurationParameters {\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n}\r\n\r\nexport class Configuration {\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n\r\n    constructor(configurationParameters: ConfigurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n    }\r\n\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\r\n        if (contentTypes.length == 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let type = contentTypes.find(x => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderAccept(accepts: string[]): string | undefined {\r\n        if (accepts.length == 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let type = accepts.find(x => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    public isJsonMime(mime: string): boolean {\r\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n}\r\n","/**\r\n * OnTimeApp API\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1\r\n * Contact: sergiojj932@gmail.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { CheckInResgistrationRequest } from '../model/checkInResgistrationRequest';\r\nimport { CheckInResponse } from '../model/checkInResponse';\r\nimport { CheckInResponseResponseSet } from '../model/checkInResponseResponseSet';\r\nimport { WorkedTimeResponse } from '../model/workedTimeResponse';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class CheckInRecordsService {\r\n\r\n    protected basePath = 'https://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param date \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;\r\n    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsEmailDateGet.');\r\n        }\r\n\r\n        if (date === null || date === undefined) {\r\n            throw new Error('Required parameter date was null or undefined when calling apiV1CheckInRecordsEmailDateGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords/${encodeURIComponent(String(email))}/${encodeURIComponent(String(date.toISOString()))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param from \r\n     * @param to \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;\r\n    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsEmailFromToGet.');\r\n        }\r\n\r\n        if (from === null || from === undefined) {\r\n            throw new Error('Required parameter from was null or undefined when calling apiV1CheckInRecordsEmailFromToGet.');\r\n        }\r\n\r\n        if (to === null || to === undefined) {\r\n            throw new Error('Required parameter to was null or undefined when calling apiV1CheckInRecordsEmailFromToGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords/${encodeURIComponent(String(email))}/${encodeURIComponent(String(from.toISOString()))}/${encodeURIComponent(String(to.toISOString()))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;\r\n    public apiV1CheckInRecordsEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsEmailGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords/${encodeURIComponent(String(email))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsGet(observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;\r\n    public apiV1CheckInRecordsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponse>;\r\n    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponse>>;\r\n    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponse>>;\r\n    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<CheckInResponse>(`${this.basePath}/api/v1/CheckInRecords/Register`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param date \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'body', reportProgress?: boolean): Observable<WorkedTimeResponse>;\r\n    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkedTimeResponse>>;\r\n    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkedTimeResponse>>;\r\n    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsWorkedTimeEmailDateGet.');\r\n        }\r\n\r\n        if (date === null || date === undefined) {\r\n            throw new Error('Required parameter date was null or undefined when calling apiV1CheckInRecordsWorkedTimeEmailDateGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<WorkedTimeResponse>(`${this.basePath}/api/v1/CheckInRecords/WorkedTime/${encodeURIComponent(String(email))}/${encodeURIComponent(String(date.toISOString()))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * OnTimeApp API\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1\r\n * Contact: sergiojj932@gmail.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { HolidayApproveRequest } from '../model/holidayApproveRequest';\r\nimport { HolidayDeleteRequest } from '../model/holidayDeleteRequest';\r\nimport { HolidayRequestRegistration } from '../model/holidayRequestRegistration';\r\nimport { HolidayRequestResponse } from '../model/holidayRequestResponse';\r\nimport { HolidayRequestResponseResponseSet } from '../model/holidayRequestResponseResponseSet';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class HolidaysService {\r\n\r\n    protected basePath = 'https://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Approve an existing Holiday request\r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;\r\n    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;\r\n    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;\r\n    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<HolidayRequestResponse>(`${this.basePath}/api/v1/Holidays/Approve`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Delete an existing Holiday request\r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;\r\n    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;\r\n    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;\r\n    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<HolidayRequestResponse>(`${this.basePath}/api/v1/Holidays/Delete`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a set of request that belong to the user with the passed email between the years from and to\r\n     * \r\n     * @param email Owner email\r\n     * @param from From year\r\n     * @param to To year\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponseResponseSet>;\r\n    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponseResponseSet>>;\r\n    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponseResponseSet>>;\r\n    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1HolidaysEmailFromToGet.');\r\n        }\r\n\r\n        if (from === null || from === undefined) {\r\n            throw new Error('Required parameter from was null or undefined when calling apiV1HolidaysEmailFromToGet.');\r\n        }\r\n\r\n        if (to === null || to === undefined) {\r\n            throw new Error('Required parameter to was null or undefined when calling apiV1HolidaysEmailFromToGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<HolidayRequestResponseResponseSet>(`${this.basePath}/api/v1/Holidays/${encodeURIComponent(String(email))}/${encodeURIComponent(String(from))}/${encodeURIComponent(String(to))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Register a new leave request\r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;\r\n    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;\r\n    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;\r\n    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<HolidayRequestResponse>(`${this.basePath}/api/v1/Holidays/Register`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the Holiday requests that the user has to approve\r\n     * \r\n     * @param email The manager email\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1HolidaysToApproveEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponseResponseSet>;\r\n    public apiV1HolidaysToApproveEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponseResponseSet>>;\r\n    public apiV1HolidaysToApproveEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponseResponseSet>>;\r\n    public apiV1HolidaysToApproveEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1HolidaysToApproveEmailGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<HolidayRequestResponseResponseSet>(`${this.basePath}/api/v1/Holidays/ToApprove/${encodeURIComponent(String(email))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * OnTimeApp API\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1\r\n * Contact: sergiojj932@gmail.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { AuthResponse } from '../model/authResponse';\r\nimport { UserLoginRequest } from '../model/userLoginRequest';\r\nimport { UserRegistrationRequest } from '../model/userRegistrationRequest';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class IdentityService {\r\n\r\n    protected basePath = 'https://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates default admin user, this is added because we do not have a real database where to add this info.  We use an in memory db so each time the service is restarted, this should be called\r\n     * \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1IdentityInitPost(observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public apiV1IdentityInitPost(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public apiV1IdentityInitPost(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public apiV1IdentityInitPost(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/Identity/init`,\r\n            null,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Login user in the system\r\n     * \r\n     * @param body The user information\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1IdentityLoginPost(body?: UserLoginRequest, observe?: 'body', reportProgress?: boolean): Observable<AuthResponse>;\r\n    public apiV1IdentityLoginPost(body?: UserLoginRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthResponse>>;\r\n    public apiV1IdentityLoginPost(body?: UserLoginRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthResponse>>;\r\n    public apiV1IdentityLoginPost(body?: UserLoginRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<AuthResponse>(`${this.basePath}/api/v1/Identity/login`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Register a new user in the system\r\n     * \r\n     * @param body The new user information\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe?: 'body', reportProgress?: boolean): Observable<AuthResponse>;\r\n    public apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthResponse>>;\r\n    public apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthResponse>>;\r\n    public apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<AuthResponse>(`${this.basePath}/api/v1/Identity/register`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * OnTimeApp API\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1\r\n * Contact: sergiojj932@gmail.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { RoleRegistrationRequest } from '../model/roleRegistrationRequest';\r\nimport { RoleResponse } from '../model/roleResponse';\r\nimport { StringResponseSet } from '../model/stringResponseSet';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class RolesService {\r\n\r\n    protected basePath = 'https://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1RolesGet(observe?: 'body', reportProgress?: boolean): Observable<StringResponseSet>;\r\n    public apiV1RolesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StringResponseSet>>;\r\n    public apiV1RolesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StringResponseSet>>;\r\n    public apiV1RolesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<StringResponseSet>(`${this.basePath}/api/v1/Roles`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;\r\n    public apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;\r\n    public apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;\r\n    public apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<RoleResponse>(`${this.basePath}/api/v1/Roles/register`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * OnTimeApp API\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1\r\n * Contact: sergiojj932@gmail.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { RoleResponse } from '../model/roleResponse';\r\nimport { RoleResponseResponseSet } from '../model/roleResponseResponseSet';\r\nimport { UserAddSubordinateRequest } from '../model/userAddSubordinateRequest';\r\nimport { UserResponse } from '../model/userResponse';\r\nimport { UserResponseResponseSet } from '../model/userResponseResponseSet';\r\nimport { UserRoleAdditionRequest } from '../model/userRoleAdditionRequest';\r\nimport { UserRoleRemoveRequest } from '../model/userRoleRemoveRequest';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n\r\n    protected basePath = 'https://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;\r\n    public apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;\r\n    public apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;\r\n    public apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<RoleResponse>(`${this.basePath}/api/v1/Users/AddRole`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe?: 'body', reportProgress?: boolean): Observable<UserResponse>;\r\n    public apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponse>>;\r\n    public apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponse>>;\r\n    public apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<UserResponse>(`${this.basePath}/api/v1/Users/AddSubordiante`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<UserResponse>;\r\n    public apiV1UsersEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponse>>;\r\n    public apiV1UsersEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponse>>;\r\n    public apiV1UsersEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1UsersEmailGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<UserResponse>(`${this.basePath}/api/v1/Users/${encodeURIComponent(String(email))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersGet(observe?: 'body', reportProgress?: boolean): Observable<UserResponseResponseSet>;\r\n    public apiV1UsersGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponseResponseSet>>;\r\n    public apiV1UsersGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponseResponseSet>>;\r\n    public apiV1UsersGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<UserResponseResponseSet>(`${this.basePath}/api/v1/Users`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersGetRolesEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<RoleResponseResponseSet>;\r\n    public apiV1UsersGetRolesEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponseResponseSet>>;\r\n    public apiV1UsersGetRolesEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponseResponseSet>>;\r\n    public apiV1UsersGetRolesEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1UsersGetRolesEmailGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<RoleResponseResponseSet>(`${this.basePath}/api/v1/Users/GetRoles/${encodeURIComponent(String(email))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;\r\n    public apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;\r\n    public apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;\r\n    public apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<RoleResponse>(`${this.basePath}/api/v1/Users/RemoveRole`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersSubordinatesEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<UserResponseResponseSet>;\r\n    public apiV1UsersSubordinatesEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponseResponseSet>>;\r\n    public apiV1UsersSubordinatesEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponseResponseSet>>;\r\n    public apiV1UsersSubordinatesEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1UsersSubordinatesEmailGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<UserResponseResponseSet>(`${this.basePath}/api/v1/Users/Subordinates/${encodeURIComponent(String(email))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","export * from './checkInRecords.service';\r\nimport { CheckInRecordsService } from './checkInRecords.service';\r\nexport * from './holidays.service';\r\nimport { HolidaysService } from './holidays.service';\r\nexport * from './identity.service';\r\nimport { IdentityService } from './identity.service';\r\nexport * from './roles.service';\r\nimport { RolesService } from './roles.service';\r\nexport * from './users.service';\r\nimport { UsersService } from './users.service';\r\nexport const APIS = [CheckInRecordsService, HolidaysService, IdentityService, RolesService, UsersService];\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { Configuration } from './configuration';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n\r\nimport { CheckInRecordsService } from './api/checkInRecords.service';\r\nimport { HolidaysService } from './api/holidays.service';\r\nimport { IdentityService } from './api/identity.service';\r\nimport { RolesService } from './api/roles.service';\r\nimport { UsersService } from './api/users.service';\r\n\r\n@NgModule({\r\n  imports:      [],\r\n  declarations: [],\r\n  exports:      [],\r\n  providers: [\r\n    CheckInRecordsService,\r\n    HolidaysService,\r\n    IdentityService,\r\n    RolesService,\r\n    UsersService ]\r\n})\r\nexport class ApiModule {\r\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\r\n        };\r\n    }\r\n\r\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\r\n                 @Optional() http: HttpClient) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n            'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n}\r\n"],"names":["InjectionToken","HttpHeaders","tslib_1.__values","Injectable","tslib_1.__param","Optional","Inject","HttpClient","NgModule","SkipSelf"],"mappings":"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"}