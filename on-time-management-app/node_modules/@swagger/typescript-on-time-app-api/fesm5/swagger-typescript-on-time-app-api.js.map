{"version":3,"file":"swagger-typescript-on-time-app-api.js","sources":["ng://@swagger/typescript-on-time-app-api/variables.ts","ng://@swagger/typescript-on-time-app-api/configuration.ts","ng://@swagger/typescript-on-time-app-api/api/checkInRecords.service.ts","ng://@swagger/typescript-on-time-app-api/api/holidays.service.ts","ng://@swagger/typescript-on-time-app-api/api/identity.service.ts","ng://@swagger/typescript-on-time-app-api/api/roles.service.ts","ng://@swagger/typescript-on-time-app-api/api/users.service.ts","ng://@swagger/typescript-on-time-app-api/api/api.ts","ng://@swagger/typescript-on-time-app-api/api.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const BASE_PATH = new InjectionToken<string>('basePath');\r\nexport const COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n}\r\n","export interface ConfigurationParameters {\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n}\r\n\r\nexport class Configuration {\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n\r\n    constructor(configurationParameters: ConfigurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n    }\r\n\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\r\n        if (contentTypes.length == 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let type = contentTypes.find(x => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderAccept(accepts: string[]): string | undefined {\r\n        if (accepts.length == 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let type = accepts.find(x => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    public isJsonMime(mime: string): boolean {\r\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n}\r\n","/**\r\n * OnTimeApp API\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1\r\n * Contact: sergiojj932@gmail.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { CheckInResgistrationRequest } from '../model/checkInResgistrationRequest';\r\nimport { CheckInResponse } from '../model/checkInResponse';\r\nimport { CheckInResponseResponseSet } from '../model/checkInResponseResponseSet';\r\nimport { WorkedTimeResponse } from '../model/workedTimeResponse';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class CheckInRecordsService {\r\n\r\n    protected basePath = 'https://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param date \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;\r\n    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsEmailDateGet.');\r\n        }\r\n\r\n        if (date === null || date === undefined) {\r\n            throw new Error('Required parameter date was null or undefined when calling apiV1CheckInRecordsEmailDateGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords/${encodeURIComponent(String(email))}/${encodeURIComponent(String(date.toISOString()))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param from \r\n     * @param to \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;\r\n    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsEmailFromToGet.');\r\n        }\r\n\r\n        if (from === null || from === undefined) {\r\n            throw new Error('Required parameter from was null or undefined when calling apiV1CheckInRecordsEmailFromToGet.');\r\n        }\r\n\r\n        if (to === null || to === undefined) {\r\n            throw new Error('Required parameter to was null or undefined when calling apiV1CheckInRecordsEmailFromToGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords/${encodeURIComponent(String(email))}/${encodeURIComponent(String(from.toISOString()))}/${encodeURIComponent(String(to.toISOString()))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;\r\n    public apiV1CheckInRecordsEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsEmailGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords/${encodeURIComponent(String(email))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsGet(observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;\r\n    public apiV1CheckInRecordsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;\r\n    public apiV1CheckInRecordsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponse>;\r\n    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponse>>;\r\n    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponse>>;\r\n    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<CheckInResponse>(`${this.basePath}/api/v1/CheckInRecords/Register`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param date \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'body', reportProgress?: boolean): Observable<WorkedTimeResponse>;\r\n    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkedTimeResponse>>;\r\n    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkedTimeResponse>>;\r\n    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsWorkedTimeEmailDateGet.');\r\n        }\r\n\r\n        if (date === null || date === undefined) {\r\n            throw new Error('Required parameter date was null or undefined when calling apiV1CheckInRecordsWorkedTimeEmailDateGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<WorkedTimeResponse>(`${this.basePath}/api/v1/CheckInRecords/WorkedTime/${encodeURIComponent(String(email))}/${encodeURIComponent(String(date.toISOString()))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * OnTimeApp API\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1\r\n * Contact: sergiojj932@gmail.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { HolidayApproveRequest } from '../model/holidayApproveRequest';\r\nimport { HolidayDeleteRequest } from '../model/holidayDeleteRequest';\r\nimport { HolidayRequestRegistration } from '../model/holidayRequestRegistration';\r\nimport { HolidayRequestResponse } from '../model/holidayRequestResponse';\r\nimport { HolidayRequestResponseResponseSet } from '../model/holidayRequestResponseResponseSet';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class HolidaysService {\r\n\r\n    protected basePath = 'https://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Approve an existing Holiday request\r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;\r\n    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;\r\n    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;\r\n    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<HolidayRequestResponse>(`${this.basePath}/api/v1/Holidays/Approve`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Delete an existing Holiday request\r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;\r\n    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;\r\n    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;\r\n    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<HolidayRequestResponse>(`${this.basePath}/api/v1/Holidays/Delete`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a set of request that belong to the user with the passed email between the years from and to\r\n     * \r\n     * @param email Owner email\r\n     * @param from From year\r\n     * @param to To year\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponseResponseSet>;\r\n    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponseResponseSet>>;\r\n    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponseResponseSet>>;\r\n    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1HolidaysEmailFromToGet.');\r\n        }\r\n\r\n        if (from === null || from === undefined) {\r\n            throw new Error('Required parameter from was null or undefined when calling apiV1HolidaysEmailFromToGet.');\r\n        }\r\n\r\n        if (to === null || to === undefined) {\r\n            throw new Error('Required parameter to was null or undefined when calling apiV1HolidaysEmailFromToGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<HolidayRequestResponseResponseSet>(`${this.basePath}/api/v1/Holidays/${encodeURIComponent(String(email))}/${encodeURIComponent(String(from))}/${encodeURIComponent(String(to))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Register a new leave request\r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;\r\n    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;\r\n    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;\r\n    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<HolidayRequestResponse>(`${this.basePath}/api/v1/Holidays/Register`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the Holiday requests that the user has to approve\r\n     * \r\n     * @param email The manager email\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1HolidaysToApproveEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponseResponseSet>;\r\n    public apiV1HolidaysToApproveEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponseResponseSet>>;\r\n    public apiV1HolidaysToApproveEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponseResponseSet>>;\r\n    public apiV1HolidaysToApproveEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1HolidaysToApproveEmailGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<HolidayRequestResponseResponseSet>(`${this.basePath}/api/v1/Holidays/ToApprove/${encodeURIComponent(String(email))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * OnTimeApp API\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1\r\n * Contact: sergiojj932@gmail.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { AuthResponse } from '../model/authResponse';\r\nimport { UserLoginRequest } from '../model/userLoginRequest';\r\nimport { UserRegistrationRequest } from '../model/userRegistrationRequest';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class IdentityService {\r\n\r\n    protected basePath = 'https://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates default admin user, this is added because we do not have a real database where to add this info.  We use an in memory db so each time the service is restarted, this should be called\r\n     * \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1IdentityInitPost(observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public apiV1IdentityInitPost(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public apiV1IdentityInitPost(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public apiV1IdentityInitPost(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/Identity/init`,\r\n            null,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Login user in the system\r\n     * \r\n     * @param body The user information\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1IdentityLoginPost(body?: UserLoginRequest, observe?: 'body', reportProgress?: boolean): Observable<AuthResponse>;\r\n    public apiV1IdentityLoginPost(body?: UserLoginRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthResponse>>;\r\n    public apiV1IdentityLoginPost(body?: UserLoginRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthResponse>>;\r\n    public apiV1IdentityLoginPost(body?: UserLoginRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<AuthResponse>(`${this.basePath}/api/v1/Identity/login`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Register a new user in the system\r\n     * \r\n     * @param body The new user information\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe?: 'body', reportProgress?: boolean): Observable<AuthResponse>;\r\n    public apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthResponse>>;\r\n    public apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthResponse>>;\r\n    public apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<AuthResponse>(`${this.basePath}/api/v1/Identity/register`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * OnTimeApp API\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1\r\n * Contact: sergiojj932@gmail.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { RoleRegistrationRequest } from '../model/roleRegistrationRequest';\r\nimport { RoleResponse } from '../model/roleResponse';\r\nimport { StringResponseSet } from '../model/stringResponseSet';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class RolesService {\r\n\r\n    protected basePath = 'https://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1RolesGet(observe?: 'body', reportProgress?: boolean): Observable<StringResponseSet>;\r\n    public apiV1RolesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StringResponseSet>>;\r\n    public apiV1RolesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StringResponseSet>>;\r\n    public apiV1RolesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<StringResponseSet>(`${this.basePath}/api/v1/Roles`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;\r\n    public apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;\r\n    public apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;\r\n    public apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<RoleResponse>(`${this.basePath}/api/v1/Roles/register`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * OnTimeApp API\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1\r\n * Contact: sergiojj932@gmail.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { RoleResponse } from '../model/roleResponse';\r\nimport { RoleResponseResponseSet } from '../model/roleResponseResponseSet';\r\nimport { UserAddSubordinateRequest } from '../model/userAddSubordinateRequest';\r\nimport { UserResponse } from '../model/userResponse';\r\nimport { UserResponseResponseSet } from '../model/userResponseResponseSet';\r\nimport { UserRoleAdditionRequest } from '../model/userRoleAdditionRequest';\r\nimport { UserRoleRemoveRequest } from '../model/userRoleRemoveRequest';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n\r\n    protected basePath = 'https://localhost';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;\r\n    public apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;\r\n    public apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;\r\n    public apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<RoleResponse>(`${this.basePath}/api/v1/Users/AddRole`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe?: 'body', reportProgress?: boolean): Observable<UserResponse>;\r\n    public apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponse>>;\r\n    public apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponse>>;\r\n    public apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<UserResponse>(`${this.basePath}/api/v1/Users/AddSubordiante`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<UserResponse>;\r\n    public apiV1UsersEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponse>>;\r\n    public apiV1UsersEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponse>>;\r\n    public apiV1UsersEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1UsersEmailGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<UserResponse>(`${this.basePath}/api/v1/Users/${encodeURIComponent(String(email))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersGet(observe?: 'body', reportProgress?: boolean): Observable<UserResponseResponseSet>;\r\n    public apiV1UsersGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponseResponseSet>>;\r\n    public apiV1UsersGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponseResponseSet>>;\r\n    public apiV1UsersGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<UserResponseResponseSet>(`${this.basePath}/api/v1/Users`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersGetRolesEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<RoleResponseResponseSet>;\r\n    public apiV1UsersGetRolesEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponseResponseSet>>;\r\n    public apiV1UsersGetRolesEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponseResponseSet>>;\r\n    public apiV1UsersGetRolesEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1UsersGetRolesEmailGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<RoleResponseResponseSet>(`${this.basePath}/api/v1/Users/GetRoles/${encodeURIComponent(String(email))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param body \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;\r\n    public apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;\r\n    public apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;\r\n    public apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json-patch+json',\r\n            'application/json',\r\n            'text/json',\r\n            'application/_*+json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<RoleResponse>(`${this.basePath}/api/v1/Users/RemoveRole`,\r\n            body,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param email \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public apiV1UsersSubordinatesEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<UserResponseResponseSet>;\r\n    public apiV1UsersSubordinatesEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponseResponseSet>>;\r\n    public apiV1UsersSubordinatesEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponseResponseSet>>;\r\n    public apiV1UsersSubordinatesEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (email === null || email === undefined) {\r\n            throw new Error('Required parameter email was null or undefined when calling apiV1UsersSubordinatesEmailGet.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (Bearer) required\r\n        if (this.configuration.apiKeys[\"Authorization\"]) {\r\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'text/plain',\r\n            'application/json',\r\n            'text/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<UserResponseResponseSet>(`${this.basePath}/api/v1/Users/Subordinates/${encodeURIComponent(String(email))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","export * from './checkInRecords.service';\r\nimport { CheckInRecordsService } from './checkInRecords.service';\r\nexport * from './holidays.service';\r\nimport { HolidaysService } from './holidays.service';\r\nexport * from './identity.service';\r\nimport { IdentityService } from './identity.service';\r\nexport * from './roles.service';\r\nimport { RolesService } from './roles.service';\r\nexport * from './users.service';\r\nimport { UsersService } from './users.service';\r\nexport const APIS = [CheckInRecordsService, HolidaysService, IdentityService, RolesService, UsersService];\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { Configuration } from './configuration';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n\r\nimport { CheckInRecordsService } from './api/checkInRecords.service';\r\nimport { HolidaysService } from './api/holidays.service';\r\nimport { IdentityService } from './api/identity.service';\r\nimport { RolesService } from './api/roles.service';\r\nimport { UsersService } from './api/users.service';\r\n\r\n@NgModule({\r\n  imports:      [],\r\n  declarations: [],\r\n  exports:      [],\r\n  providers: [\r\n    CheckInRecordsService,\r\n    HolidaysService,\r\n    IdentityService,\r\n    RolesService,\r\n    UsersService ]\r\n})\r\nexport class ApiModule {\r\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\r\n        };\r\n    }\r\n\r\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\r\n                 @Optional() http: HttpClient) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n            'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n}\r\n"],"names":["tslib_1.__values","tslib_1.__param"],"mappings":"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"}