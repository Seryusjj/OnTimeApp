import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { RoleRegistrationRequest } from '../model/roleRegistrationRequest';
import { RoleResponse } from '../model/roleResponse';
import { StringResponseSet } from '../model/stringResponseSet';
import { Configuration } from '../configuration';
export declare class RolesService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1RolesGet(observe?: 'body', reportProgress?: boolean): Observable<StringResponseSet>;
    apiV1RolesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StringResponseSet>>;
    apiV1RolesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StringResponseSet>>;
    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;
    apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;
    apiV1RolesRegisterPost(body?: RoleRegistrationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;
}
