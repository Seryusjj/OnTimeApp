import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CheckInResgistrationRequest } from '../model/checkInResgistrationRequest';
import { CheckInResponse } from '../model/checkInResponse';
import { CheckInResponseResponseSet } from '../model/checkInResponseResponseSet';
import { WorkedTimeResponse } from '../model/workedTimeResponse';
import { Configuration } from '../configuration';
export declare class CheckInRecordsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     *
     *
     * @param email
     * @param date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;
    apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;
    apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;
    /**
     *
     *
     * @param email
     * @param from
     * @param to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;
    apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;
    apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;
    /**
     *
     *
     * @param email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1CheckInRecordsEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;
    apiV1CheckInRecordsEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;
    apiV1CheckInRecordsEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;
    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1CheckInRecordsGet(observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;
    apiV1CheckInRecordsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;
    apiV1CheckInRecordsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;
    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponse>;
    apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponse>>;
    apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponse>>;
    /**
     *
     *
     * @param email
     * @param date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'body', reportProgress?: boolean): Observable<WorkedTimeResponse>;
    apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkedTimeResponse>>;
    apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkedTimeResponse>>;
}
