import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { RoleResponse } from '../model/roleResponse';
import { RoleResponseResponseSet } from '../model/roleResponseResponseSet';
import { UserAddSubordinateRequest } from '../model/userAddSubordinateRequest';
import { UserResponse } from '../model/userResponse';
import { UserResponseResponseSet } from '../model/userResponseResponseSet';
import { UserRoleAdditionRequest } from '../model/userRoleAdditionRequest';
import { UserRoleRemoveRequest } from '../model/userRoleRemoveRequest';
import { Configuration } from '../configuration';
export declare class UsersService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;
    apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;
    apiV1UsersAddRolePost(body?: UserRoleAdditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;
    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe?: 'body', reportProgress?: boolean): Observable<UserResponse>;
    apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponse>>;
    apiV1UsersAddSubordiantePost(body?: UserAddSubordinateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponse>>;
    /**
     *
     *
     * @param email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsersEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<UserResponse>;
    apiV1UsersEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponse>>;
    apiV1UsersEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponse>>;
    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsersGet(observe?: 'body', reportProgress?: boolean): Observable<UserResponseResponseSet>;
    apiV1UsersGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponseResponseSet>>;
    apiV1UsersGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponseResponseSet>>;
    /**
     *
     *
     * @param email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsersGetRolesEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<RoleResponseResponseSet>;
    apiV1UsersGetRolesEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponseResponseSet>>;
    apiV1UsersGetRolesEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponseResponseSet>>;
    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;
    apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;
    apiV1UsersRemoveRolePost(body?: UserRoleRemoveRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;
    /**
     *
     *
     * @param email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsersSubordinatesEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<UserResponseResponseSet>;
    apiV1UsersSubordinatesEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponseResponseSet>>;
    apiV1UsersSubordinatesEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponseResponseSet>>;
}
