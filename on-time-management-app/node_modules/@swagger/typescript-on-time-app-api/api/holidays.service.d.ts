import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { HolidayApproveRequest } from '../model/holidayApproveRequest';
import { HolidayDeleteRequest } from '../model/holidayDeleteRequest';
import { HolidayRequestRegistration } from '../model/holidayRequestRegistration';
import { HolidayRequestResponse } from '../model/holidayRequestResponse';
import { HolidayRequestResponseResponseSet } from '../model/holidayRequestResponseResponseSet';
import { Configuration } from '../configuration';
export declare class HolidaysService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     * Approve an existing Holiday request
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;
    apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;
    apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;
    /**
     * Delete an existing Holiday request
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;
    apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;
    apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;
    /**
     * Get a set of request that belong to the user with the passed email between the years from and to
     *
     * @param email Owner email
     * @param from From year
     * @param to To year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponseResponseSet>;
    apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponseResponseSet>>;
    apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponseResponseSet>>;
    /**
     * Register a new leave request
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;
    apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;
    apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;
    /**
     * Get the Holiday requests that the user has to approve
     *
     * @param email The manager email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1HolidaysToApproveEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponseResponseSet>;
    apiV1HolidaysToApproveEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponseResponseSet>>;
    apiV1HolidaysToApproveEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponseResponseSet>>;
}
