import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthResponse } from '../model/authResponse';
import { UserLoginRequest } from '../model/userLoginRequest';
import { UserRegistrationRequest } from '../model/userRegistrationRequest';
import { Configuration } from '../configuration';
export declare class IdentityService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     * Creates default admin user, this is added because we do not have a real database where to add this info.  We use an in memory db so each time the service is restarted, this should be called
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1IdentityInitPost(observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1IdentityInitPost(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1IdentityInitPost(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Login user in the system
     *
     * @param body The user information
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1IdentityLoginPost(body?: UserLoginRequest, observe?: 'body', reportProgress?: boolean): Observable<AuthResponse>;
    apiV1IdentityLoginPost(body?: UserLoginRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthResponse>>;
    apiV1IdentityLoginPost(body?: UserLoginRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthResponse>>;
    /**
     * Register a new user in the system
     *
     * @param body The new user information
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe?: 'body', reportProgress?: boolean): Observable<AuthResponse>;
    apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthResponse>>;
    apiV1IdentityRegisterPost(body?: UserRegistrationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthResponse>>;
}
