/**
 * OnTimeApp API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: sergiojj932@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { HolidayApproveRequest } from '../model/holidayApproveRequest';
import { HolidayDeleteRequest } from '../model/holidayDeleteRequest';
import { HolidayRequestRegistration } from '../model/holidayRequestRegistration';
import { HolidayRequestResponse } from '../model/holidayRequestResponse';
import { HolidayRequestResponseResponseSet } from '../model/holidayRequestResponseResponseSet';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HolidaysService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Approve an existing Holiday request
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;
    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;
    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;
    public apiV1HolidaysApprovePost(body?: HolidayApproveRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HolidayRequestResponse>(`${this.basePath}/api/v1/Holidays/Approve`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an existing Holiday request
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;
    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;
    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;
    public apiV1HolidaysDeletePost(body?: HolidayDeleteRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HolidayRequestResponse>(`${this.basePath}/api/v1/Holidays/Delete`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a set of request that belong to the user with the passed email between the years from and to
     * 
     * @param email Owner email
     * @param from From year
     * @param to To year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponseResponseSet>;
    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponseResponseSet>>;
    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponseResponseSet>>;
    public apiV1HolidaysEmailFromToGet(email: string, from: number, to: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling apiV1HolidaysEmailFromToGet.');
        }

        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling apiV1HolidaysEmailFromToGet.');
        }

        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling apiV1HolidaysEmailFromToGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<HolidayRequestResponseResponseSet>(`${this.basePath}/api/v1/Holidays/${encodeURIComponent(String(email))}/${encodeURIComponent(String(from))}/${encodeURIComponent(String(to))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Register a new leave request
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponse>;
    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponse>>;
    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponse>>;
    public apiV1HolidaysRegisterPost(body?: HolidayRequestRegistration, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HolidayRequestResponse>(`${this.basePath}/api/v1/Holidays/Register`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the Holiday requests that the user has to approve
     * 
     * @param email The manager email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1HolidaysToApproveEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<HolidayRequestResponseResponseSet>;
    public apiV1HolidaysToApproveEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HolidayRequestResponseResponseSet>>;
    public apiV1HolidaysToApproveEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HolidayRequestResponseResponseSet>>;
    public apiV1HolidaysToApproveEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling apiV1HolidaysToApproveEmailGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<HolidayRequestResponseResponseSet>(`${this.basePath}/api/v1/Holidays/ToApprove/${encodeURIComponent(String(email))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
