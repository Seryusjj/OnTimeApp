/**
 * OnTimeApp API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: sergiojj932@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CheckInResgistrationRequest } from '../model/checkInResgistrationRequest';
import { CheckInResponse } from '../model/checkInResponse';
import { CheckInResponseResponseSet } from '../model/checkInResponseResponseSet';
import { WorkedTimeResponse } from '../model/workedTimeResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CheckInRecordsService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param email 
     * @param date 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;
    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;
    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;
    public apiV1CheckInRecordsEmailDateGet(email: string, date: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsEmailDateGet.');
        }

        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling apiV1CheckInRecordsEmailDateGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords/${encodeURIComponent(String(email))}/${encodeURIComponent(String(date.toISOString()))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param email 
     * @param from 
     * @param to 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;
    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;
    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;
    public apiV1CheckInRecordsEmailFromToGet(email: string, from: Date, to: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsEmailFromToGet.');
        }

        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling apiV1CheckInRecordsEmailFromToGet.');
        }

        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling apiV1CheckInRecordsEmailFromToGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords/${encodeURIComponent(String(email))}/${encodeURIComponent(String(from.toISOString()))}/${encodeURIComponent(String(to.toISOString()))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param email 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CheckInRecordsEmailGet(email: string, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;
    public apiV1CheckInRecordsEmailGet(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;
    public apiV1CheckInRecordsEmailGet(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;
    public apiV1CheckInRecordsEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsEmailGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords/${encodeURIComponent(String(email))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CheckInRecordsGet(observe?: 'body', reportProgress?: boolean): Observable<CheckInResponseResponseSet>;
    public apiV1CheckInRecordsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponseResponseSet>>;
    public apiV1CheckInRecordsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponseResponseSet>>;
    public apiV1CheckInRecordsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CheckInResponseResponseSet>(`${this.basePath}/api/v1/CheckInRecords`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'body', reportProgress?: boolean): Observable<CheckInResponse>;
    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CheckInResponse>>;
    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CheckInResponse>>;
    public apiV1CheckInRecordsRegisterPost(body?: CheckInResgistrationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CheckInResponse>(`${this.basePath}/api/v1/CheckInRecords/Register`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param email 
     * @param date 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'body', reportProgress?: boolean): Observable<WorkedTimeResponse>;
    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkedTimeResponse>>;
    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkedTimeResponse>>;
    public apiV1CheckInRecordsWorkedTimeEmailDateGet(email: string, date: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling apiV1CheckInRecordsWorkedTimeEmailDateGet.');
        }

        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling apiV1CheckInRecordsWorkedTimeEmailDateGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<WorkedTimeResponse>(`${this.basePath}/api/v1/CheckInRecords/WorkedTime/${encodeURIComponent(String(email))}/${encodeURIComponent(String(date.toISOString()))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
